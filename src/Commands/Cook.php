<?php

namespace Genericmilk\Cooker\Commands;

use Illuminate\Console\Command;

use Cache;
use Exception;

// Cooker preparsers
use Genericmilk\Cooker\Preparsers\Preloads;
use Genericmilk\Cooker\Preparsers\Libraries;
use Genericmilk\Cooker\Preparsers\Packages;

// Cooker engines
use Genericmilk\Cooker\Ovens\Js;
use Genericmilk\Cooker\Ovens\Less;
use Genericmilk\Cooker\Ovens\Scss;


class Cook extends Command
{
	protected $signature = 'cooker:cook {--dev} {--prod} {--test} {--skipsetup} {--force}';

	protected $dev;
	protected $version;
	protected $env;

	public $hasFailed = false;
	public $allHasSkipped = true;

    protected $description = 'Run all defined cookers';

	public function __construct(){
        parent::__construct();
		$this->version = json_decode(file_get_contents(__DIR__.'/../../composer.json'))->version;		
    }
    public function handle(){
		$this->dev = $this->setupEnv();

		// Check if we have run setup and launch it if we need to
		if(is_null(config('cooker.silent'))){
			if(!$this->option('skipsetup')){
				$this->call('cooker:init');
				return;
			}
		}

		$start = microtime(true); // Start a timer
		!config('cooker.silent') ? $this->info('👨‍🍳 Cooker '.$this->version.' ('.ucfirst($this->env).')'.PHP_EOL) : '';

		// Run ovens
		$table = [];

		foreach(config('cooker.ovens') as $job){

			try{

				// Should we run this job?
				if(!$this->option('force')){
					$hasDiffs = true;
				}else{
					if(config('cooker.canSpeedyCook')){
						try{
							$hasDiffs = $this->compareHashTree(public_path('build/'.$job['output'].'.speedy'));
						}catch(Exception $e){
							// Probably no hash tree yet, make one as the diffs (All files need processing)
							$hasDiffs = true;
						}
					}else{
						$hasDiffs = true; // default to true if speedycook is off
					}
				}


				if($hasDiffs){
					// Run the oven
					$oven = new $job['cooker'](); // Boot the cooker
					$stamp = $job['stamped'] ? "/* ".$job['output']." Generated by Cooker ".$this->version." (https://github.com/genericmilk/cooker) ::: ".ucfirst($this->env)." build compiled at ".now()." */" : ""; // If stamped is on output the build times
	
					// Step 1: Get the packages
					if($oven->format=='js'){
						$packages = Packages::obtain();
					}else{
						$packages = '';
					}

					// Step 2: Get the preloads
					$preloads = Preloads::obtain($job['preload'],$oven,$this->dev); // get the cook job's preloads								

					// Step 3: Get the libraries
					$libraries = Libraries::obtain($oven);

					// Step 4: Make a new output buffer for the appcode
					$appcode = ''; // start a new output buffer

					// Step 5: Add the toolbelt if JS
					if($oven->format=='js'){
						if($job['toolbelt']){
							// User wants toolbelt
							$toolbelt = file_get_contents(__DIR__.'/../toolbelt.js');
		
							// Configure the toolbelt
							$toolbelt = str_replace('__isProd__',($this->env=='prod' ? 'true' : 'false'),$toolbelt);
							$toolbelt = str_replace('__cookerVersion__',($this->version),$toolbelt);

							$appcode .= $toolbelt;
						}
					}

					// Step 6: Cook the appcode
					$appcode .= $oven::cook($job); // cook the job's inputted filtes
					$appcode .= $oven->format=='js' ? $job['namespace'].'.boot();' : ''; // if javascript, we need to finish by running .boot() on the namespace
					if($this->env=='prod'){
						// We're running in production, compress the output
						$appcode = $oven::compress($appcode);
					}
					

					// Compile the output into a mega string
					$o = $stamp . $packages . $preloads . $libraries . $appcode;
					
					// make the build directory if it doesn't exist
					if (!file_exists(public_path('build'))) {
						mkdir(public_path('build'), 0777, true);
					}
					
					// Write the output
					file_put_contents(public_path('build/'.$job['output']),$o); // write o
					$this->allHasSkipped = false;

					// Update the speedy
					$hashTree = $this->generateHashTree($oven,$job);
					file_put_contents(public_path('build/'.$job['output'].'.speedy'),$hashTree); // write o

					$table[] = [
						'🟢',
						$job['name'],
						'OK'
					];
				}else{
					$table[] = [
						'🟠',
						$job['name'],
						'No changes'
					];
				}
								

			}catch(Exception $e){
				if($this->option('test')){
					throw new Exception($e); // throw an exception to kick out any jobs that have failed
				}else{
					$this->allHasSkipped = false;
					$table[] = [
						'🔴',
						$job['name'],
						$e->getMessage()
					];
					$this->hasFailed = true;
				}
				
				
			}
		}

		// All jobs finished! Stop the timer and print the table
		$time_elapsed_secs = round(microtime(true) - $start,2);

		// Only show the table if cooker is not silent OR if cooker has failed
		if(!config('cooker.silent') || $this->hasFailed){
			$this->table(['','Job', 'Status'],$table);
			$this->line(PHP_EOL."⏰ Took ".$time_elapsed_secs."s   ⌚️ Finished ".now()->format('H:i:s').PHP_EOL."✨ Share the love: https://github.com/genericmilk/cooker");

			// Show a notification if enabled
			if(config('cooker.notifications')){
				if($this->allHasSkipped){
					$this->notify('🟠 Cook Skipped' ,'Took '.$time_elapsed_secs.'s',__DIR__.'/../../cooker.png');
				}else{
					$this->notify(($this->hasFailed ? '🔴 Cook Failed' : '🟢 Cooked OK') ,'Took '.$time_elapsed_secs.'s',__DIR__.'/../../cooker.png');
				}
			}

		}
    }

	// Helpers
	private function libraries($oven){
		// Global less libs (All common everywhere)
		try{
			$dir = scandir(resource_path($oven->directory.'/libraries'));
			unset($dir[0]);
			unset($dir[1]);
			if (($key = array_search('.DS_Store', $dir)) !== false) {
				unset($dir[$key]);
			}
			$dir = array_values($dir);
			$libs = '';
			foreach($dir as $lib){
				$libs .= $this->lastLineFormat(file_get_contents(resource_path($oven->directory.'/libraries/'.$lib)),$oven->format);
			}
			return $libs;
		}catch(Exception $e){
			return null;
		}
	}
	private function setupEnv(){
		$dev = config('app.debug');
		if($this->option('dev')){
			$dev = true;
		}
		if($this->option('prod')){
			$dev = false;
		}
		$this->env = $dev ? 'dev' : 'prod';
		return $dev;
	}
	private function generateHashTree($oven,$job){
		/*
			Generates a hash tree of all files in the oven
		*/
		$tree = [];

		$dirBase = $oven->directory;
		foreach($job['input'] as $input){
			$tree[resource_path($dirBase.'/'.$input)] = md5_file(resource_path($dirBase.'/'.$input));
		}

		return json_encode($tree);
	}
	private function compareHashTree($speedy){
		$diffs = [];
		$speedy = json_decode(file_get_contents($speedy),true);

		foreach($speedy as $file => $hash){
			if(md5_file($file)!=$hash){
				$diffs[] = $file;
			}
		}

		return count($diffs)>0;
	}
}

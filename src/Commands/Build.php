<?php

namespace Genericmilk\Cooker\Commands;

use Illuminate\Console\Command;

use Carbon\Carbon;
use Cache;

// Cooker subsystems
use Genericmilk\Cooker\Frameworks;

// Cooker engines
use Genericmilk\Cooker\Cookers\Js;
use Genericmilk\Cooker\Cookers\Less;
use Genericmilk\Cooker\Cookers\Scss;
use Genericmilk\Cooker\Cookers\Styl;


class Build extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
	protected $signature = 'cooker:cook {--dev} {--prod}';
	protected $dev;

	protected $version;
	protected $env;

    protected $description = 'Run all defined cookers';
    public function __construct(){
        parent::__construct();
    }
    public function handle(){
        $this->version = (object)json_decode(file_get_contents(__DIR__.'/../composer.json'))->version;
		$this->dev = $this->setupEnv();
		!config('cooker.silent') ? $this->info('👨‍🍳 Cooker '.$this->version.' ('.$this->env.')'.PHP_EOL) : '';

		// Setup
		if(is_null(config('cooker.namespace'))){
			if ($this->confirm('Thanks for installing Cooker! Running setup will remove the /resources/js and /resources/sass folders in order to initialise. Ready to begin the setup?')) {
				$this->call('vendor:publish', [
					'--provider' => 'Genericmilk\Cooker\ServiceProvider'
				]);
				$this->removeDirectory(resource_path('js'));
				$this->removeDirectory(resource_path('sass'));
				$this->removeDirectory(resource_path('css'));	
				try{
					mkdir(public_path('build'));
				}catch(\Exception $e){
					$this->error('✋ Could not create build folder. Assuming already exists?');
				}

				if(file_exists(base_path('.gitignore'))){
					$giF = file_get_contents(base_path('.gitignore'));
					if (!strpos($giF, '/public/build') !== false) {
						$gi = fopen(base_path().'/.gitignore', 'a');
						$data = PHP_EOL.'/public/build'.PHP_EOL;
						fwrite($gi, $data);
						$this->info('⛓ Added cooked targets to .gitignore');
					}
				}
				mkdir(resource_path('less'));
				mkdir(resource_path('less/libraries'));
				mkdir(resource_path('js'));
				mkdir(resource_path('js/libraries'));
				if(!file_exists(resource_path('js/app.js'))){
					$b = fopen(resource_path('js/app.js'), 'w');
					$data = 'var app = {'.PHP_EOL;
					$data .= '	boot: function(){'.PHP_EOL;
					$data .= '		alert("Cooker is ready and rocking!");'.PHP_EOL;
					$data .= '	}'.PHP_EOL;
					$data .= '};';
					fwrite($b, $data);
				}	
				if(!file_exists(resource_path('less/app.less'))){
					$b = fopen(resource_path('less/app.less'), 'w');
					$data = '// Write your less here or extend it using config.cooker!';
					fwrite($b, $data);
				}	
				
				$this->info('💚 Installed! Enjoy using cooker! To get started, run php artisan build:res again');
				return; // Die here
			}else{
				$this->error('😵 Setup aborted');
				return;
			}
		}

		// Run jobs
		foreach(config('cooker.cookers') as $job){
			$cooker = new $job['cooker']();			
			$stamp = $job['stamped'] ? "/* ".$job['output']." Generated by Cooker v".$this->version." by Genericmilk (".$this->env.") - Last build at ".Carbon::now()." */" : "";
			$frameworks = Frameworks::obtain($cooker->format);
			$libraries = $this->libraries($job['libraries']);
			$appcode = $cooker::cook($job); // custom resources			

			$o = $stamp . $frameworks . $libraries . $appcode;
			file_put_contents(public_path('build/'.$job['output']),$o); // write o
		}

		if(!config('cooker.silent')){
			$this->line(PHP_EOL.PHP_EOL."🚀 All done!");
			$this->line("🌟 Show your support at https://github.com/genericmilk/cooker");
		}
    }

	private function libraries($path){
		// Global less libs (All common everywhere)
		try{
			$dir = scandir(resource_path($path));
			unset($dir[0]);
			unset($dir[1]);
			if (($key = array_search('.DS_Store', $dir)) !== false) {
				unset($dir[$key]);
			}
			$dir = array_values($dir);
			$libs = '';
			foreach($dir as $lib){
				$libs .= $this->lastLineFormat(file_get_contents(resource_path('less/libraries/'.$lib)));
			}
			return $libs;
		}catch(\Exception $e){
			return null;
		}
	}

	// Compressor
	private function compress($input,$type){
		if($type=='css'){
			$input = preg_replace('/\/\*((?!\*\/).)*\*\//','',$input); // negative look ahead
			$input = preg_replace('/\s{2,}/',' ',$input);
			$input = preg_replace('/\s*([:;{}])\s*/','$1',$input);
			$input = preg_replace('/;}/','}',$input);			
		}elseif($type=='js'){
			if(trim($input) === "") return $input;
			$input =  preg_replace(
				array(
					// Remove comment(s)
					'#\s*("(?:[^"\\\]++|\\\.)*+"|\'(?:[^\'\\\\]++|\\\.)*+\')\s*|\s*\/\*(?!\!|@cc_on)(?>[\s\S]*?\*\/)\s*|\s*(?<![\:\=])\/\/.*(?=[\n\r]|$)|^\s*|\s*$#',
					// Remove white-space(s) outside the string and regex
					'#("(?:[^"\\\]++|\\\.)*+"|\'(?:[^\'\\\\]++|\\\.)*+\'|\/\*(?>.*?\*\/)|\/(?!\/)[^\n\r]*?\/(?=[\s.,;]|[gimuy]|$))|\s*([!%&*\(\)\-=+\[\]\{\}|;:,.<>?\/])\s*#s',
					// Remove the last semicolon
					'#;+\}#',
					// Minify object attribute(s) except JSON attribute(s). From `{'foo':'bar'}` to `{foo:'bar'}`
					'#([\{,])([\'])(\d+|[a-z_][a-z0-9_]*)\2(?=\:)#i',
					// --ibid. From `foo['bar']` to `foo.bar`
					'#([a-z0-9_\)\]])\[([\'"])([a-z_][a-z0-9_]*)\2\]#i'
				),
				array(
					'$1',
					'$1$2',
					'}',
					'$1$3',
					'$1.$3'
				),
			$input);
		}
		$input = $this->lastLineFormat($input);
		return $input;
	}

	
	private function removeDirectory($path) {
		try{
	    // The preg_replace is necessary in order to traverse certain types of folder paths (such as /dir/[[dir2]]/dir3.abc#/)
	    // The {,.}* with GLOB_BRACE is necessary to pull all hidden files (have to remove or get "Directory not empty" errors)
	    $files = glob(preg_replace('/(\*|\?|\[)/', '[$1]', $path).'/{,.}*', GLOB_BRACE);
	    foreach ($files as $file) {
		if ($file == $path.'/.' || $file == $path.'/..') { continue; } // skip special dir entries
		is_dir($file) ? $this->removeDirectory($file) : unlink($file);
	    }
	    rmdir($path);
		return;
		}catch(\Exception $e){
		}
	}
	private function setupEnv(){
		$dev = config('app.debug');
		if($this->option('dev')){
			$dev = true;
		}
		if($this->option('prod')){
			$dev = false;
		}
		$this->env = $dev ? 'Dev' : 'Prod';
		return $dev;
	}
	private function lastLineFormat($input){
		if(substr($input, -1)!=';'){
			$input = $input.';';
		}
		return $input;
	}
}
